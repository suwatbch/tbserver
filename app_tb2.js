const puppeteer = require('puppeteer');
const express = require('express');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(express.json());

// Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Content-Type
const validateContentType = (req, res, next) => {
    if (req.method === 'POST') {
        const contentType = req.headers['content-type'];
        if (!contentType || !contentType.includes('application/json')) {
            return res.status(400).json({
                status: 'error',
                message: 'Content-Type ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô application/json'
            });
        }
    }
    next();
};

app.use(validateContentType);

const URL_TBBOT = 'http://localhost:3000';
const URL_TURBOROUTE = 'https://th.turboroute.ai/#/login';      

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Protocol
const HTTP = 'http';                // Protocol ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTTP
const HTTPS = 'https';              // Protocol ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTTPS

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Server
const SERVER_PORT = 4000;                    // ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Express server
const SERVER_HOST = 'localhost';             // host ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Express server
const CHROME_DEBUG_URL = `${HTTP}://127.0.0.1:9222`;  // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Chrome debugger

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° URL ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö
const BASE_URL = `${HTTPS}://th.turboroute.ai`;     // URL ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
const WORKDAY_URL = `${BASE_URL}/#/grab-single/single-hall`;    // URL ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ single-hall

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
const REFRESH_DELAY = 500;  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
let isRunning = false;      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
let browser;               // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö instance ‡∏Ç‡∏≠‡∏á browser
let roundCount = 0;        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
let currentConfig = null;  // ‡∏Ñ‡πà‡∏≤ config ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
let isTestMode = true;     // ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)

//---------Use API--------------------------------------------------------

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
app.post('/start', async (req, res) => {
    try {
        const { cars, routes, testMode = true } = req.body;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if (!cars || !Array.isArray(cars) || !routes || !Array.isArray(routes)) {
            return res.status(400).json({ 
                status: 'error', 
                message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
            });
        }

        if (isRunning) {
            return res.json({ status: 'success', message: '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' });
        }

        try {
            // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Chrome
            browser = await puppeteer.connect({
                browserURL: CHROME_DEBUG_URL,
                defaultViewport: null
            });
        } catch (error) {
            return res.json({ 
                status: 'error', 
                message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Chrome ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡∏î‡πâ‡∏ß‡∏¢ Debug Mode' 
            });
        }

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏à‡∏≤‡∏Å array ‡πÄ‡∏õ‡πá‡∏ô object
        const carsObject = cars.reduce((acc, car) => {
            acc[car.type] = car.quantity;
            return acc;
        }, {});

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ config ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        currentConfig = {
            myCars: carsObject,
            routeDirections: routes,
            assignedCars: Object.fromEntries(Object.keys(carsObject).map(key => [key, 0])),
            assignedRoutes: Object.fromEntries(Object.keys(carsObject).map(key => [key, []]))
        };

        isRunning = true;
        roundCount = 0;
        isTestMode = testMode;  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        runLoop();
        res.json({ 
            status: 'success', 
            message: '‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
            config: {
                cars: carsObject,
                routes: routes,
                testMode: testMode
            }
        });
    } catch (error) {
        console.error('Error in /start endpoint:', error);
        res.status(500).json({
            status: 'error',
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
            error: error.message
        });
    }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
app.get('/stop', async (req, res) => {
    if (!isRunning) {
        return res.json({ status: 'already_stopped', message: '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' });
    }
    isRunning = false;
    res.json({ status: 'stopped', message: '‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
app.get('/status', (req, res) => {
    const status = {
        status: isRunning ? 'running' : 'stopped',
        currentRound: roundCount,
        message: isRunning ? '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà' : '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô'
    };

    if (currentConfig) {
        status.config = {
            remainingCars: currentConfig.myCars,
            assignedRoutes: currentConfig.assignedRoutes
        };
    }

    res.json(status);
});

//---------Use API--------------------------------------------------------

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
function isAllJobsAssigned() {
    if (!currentConfig) return true;
    return Object.values(currentConfig.myCars).every(count => count === 0);
}

function checkJobConditions(job, config) {
    // Debug log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    console.log('Checking job:', {
        type: job.type,
        route: job.route,
        status: job.status,
        config: {
            availableCars: config.myCars[job.type],
            allowedRoutes: config.routeDirections
        }
    });

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏≠
    if (!config.myCars[job.type] || config.myCars[job.type] <= 0) {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏ñ ${job.type} ‡∏ß‡πà‡∏≤‡∏á`);
        return false;
    }
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å routeId
    const routeCode = job.routeId.split('-')[0]; // ‡πÄ‡∏ä‡πà‡∏ô "PDT" ‡∏à‡∏≤‡∏Å "PDT-7TRA"
    if (!config.routeDirections.some(route => routeCode.includes(route))) {
        console.log(`‚ùå ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á ${routeCode} ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£`);
        return false;
    }
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "grab an order"
    if (job.status !== 'grab an order') {
        console.log(`‚ùå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö (${job.status})`);
        return false;
    }
    
    console.log(`‚úÖ ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`);
    return true;
}

function displayTableData(tableData, currentPage, totalPages) {
    console.log(`\n‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ${currentPage} ‡∏à‡∏≤‡∏Å ${totalPages} ‡∏´‡∏ô‡πâ‡∏≤:`);
    
    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    let validJobs = 0;
    const jobsByType = {};
    const validJobsByType = {};

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    tableData.forEach((row, index) => {
        // ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        const routeCode = row.routeId.split('-')[0];
        
        const isValid = checkJobConditions(row, currentConfig);
        const status = isValid ? '‚úÖ' : '‚ùå';
        
        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ
        jobsByType[row.type] = (jobsByType[row.type] || 0) + 1;
        
        // ‡∏ñ‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        if (isValid) {
            validJobs++;
            validJobsByType[row.type] = (validJobsByType[row.type] || 0) + 1;
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        console.log(
            `${index + 1}. ${status} ${row.routeId} | ${row.type} | ${routeCode} | ` +
            `${row.distance} | ${row.startTime} | ${row.duration} | ` +
            `${row.endTime} | ${row.amount} | ${row.status}`
        );

        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        console.log(`   üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:`);
        console.log(`      ‚Ä¢ ‡∏£‡∏ñ ${row.type}: ${currentConfig.myCars[row.type] > 0 ? '‚úÖ ‡∏°‡∏µ‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á' : '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á'}`);
        console.log(`      ‚Ä¢ ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á ${routeCode}: ${currentConfig.routeDirections.some(r => routeCode.includes(r)) ? '‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' : '‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'}`);
        console.log(`      ‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${row.status === 'grab an order' ? '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô'}`);
    });

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏ô‡πâ‡∏≤ ${currentPage}:`);
    console.log(`   - ‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${tableData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`   - ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ ${validJobs} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ
    console.log('\nüìà ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ:');
    Object.entries(jobsByType).forEach(([type, count]) => {
        const validCount = validJobsByType[type] || 0;
        console.log(`   - ${type}:`);
        console.log(`     ‚Ä¢ ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${count} ‡∏á‡∏≤‡∏ô`);
        console.log(`     ‚Ä¢ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ: ${validCount} ‡∏á‡∏≤‡∏ô`);
        if (currentConfig.myCars[type] > 0) {
            console.log(`     ‚Ä¢ ‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á: ${currentConfig.myCars[type]} ‡∏Ñ‡∏±‡∏ô`);
        }
    });
    
    console.log('\n-----------------------------------------------');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
function showSummary(isEndSummary = false) {
    if (!currentConfig) return;

    const now = new Date().toLocaleString('th-TH');
    console.log(`\nüìÖ ${isEndSummary ? '‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢' : '‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏£‡∏≠‡∏ö'}: ${now}`);
    
    console.log("\nüöó ‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á:");
    Object.entries(currentConfig.myCars).forEach(([carType, count]) => {
        if (count > 0) {
            console.log(`   - ${carType} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${count} ‡∏Ñ‡∏±‡∏ô`);
        }
    });

    console.log("\n‚úÖ ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô:");
    Object.entries(currentConfig.assignedRoutes).forEach(([carType, routes]) => {
        if (routes.length > 0) {
            console.log(`   - ${carType} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${routes.length} ‡∏Ñ‡∏±‡∏ô üõ£Ô∏è ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: ${routes.join(', ')}`);
        }
    });
    console.log("\n-----------------------------------------------");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏õ
async function runLoop() {
    try {
        while (isRunning && !isAllJobsAssigned()) {
            roundCount++;
            const pages = await browser.pages();
            const targetPages = pages.filter(page => page.url().includes(BASE_URL));

            if (targetPages.length > 0) {
                const targetPage = targetPages[0];
                
                // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ popup ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
                try {
                    await targetPage.evaluate(() => {
                        const dialogs = document.querySelectorAll('.el-dialog__wrapper');
                        dialogs.forEach(dialog => {
                            if (dialog.style.display !== 'none') {
                                const closeBtn = dialog.querySelector('.el-dialog__close');
                                if (closeBtn) closeBtn.click();
                            }
                        });
                    });
                } catch (error) {
                    console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö popup ‡∏Ñ‡πâ‡∏≤‡∏á');
                }

                const currentUrl = await targetPage.url();
                
                if (currentUrl === WORKDAY_URL) {
                    console.log(`\nüîÑ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${roundCount}:`);
                    await targetPage.reload({ waitUntil: 'networkidle0' });
                    
                    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞ pagination ‡∏û‡∏£‡πâ‡∏≠‡∏°
                    await targetPage.waitForSelector('table.el-table__body tbody tr', { timeout: 10000 });
                    await targetPage.waitForSelector('.el-pagination .el-pager li.number', { timeout: 10000 });

                    // ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    const totalPages = await targetPage.evaluate(() => {
                        const allNumberElements = document.querySelectorAll('.el-pager li.number');
                        return parseInt(allNumberElements[allNumberElements.length - 1]?.textContent || '1');
                    });

                    let currentPage = 1;
                    while (currentPage <= totalPages && isRunning) {
                        // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                        const tableData = await targetPage.evaluate(() => {
                            const rows = document.querySelectorAll('table.el-table__body tbody tr');
                            return Array.from(rows, row => {
                                const cells = row.querySelectorAll('td');
                                return {
                                    routeId: cells[1]?.querySelector('button')?.textContent?.trim() || '',
                                    type: cells[2]?.textContent?.trim() || '',
                                    route: cells[3]?.textContent?.trim() || '',
                                    distance: cells[4]?.textContent?.trim() || '',
                                    startTime: cells[5]?.querySelector('span')?.textContent?.trim() || '',
                                    duration: cells[6]?.textContent?.trim() || '',
                                    endTime: cells[7]?.querySelector('span')?.textContent?.trim() || '',
                                    amount: cells[8]?.querySelector('span')?.textContent?.trim() || '',
                                    status: cells[9]?.querySelector('span')?.textContent?.trim() || ''
                                };
                            });
                        });

                        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                        displayTableData(tableData, currentPage, totalPages);

                        if (currentPage < totalPages) {
                            const nextPage = currentPage + 1;
                            await targetPage.evaluate((page) => {
                                const pageButtons = document.querySelectorAll('.el-pager li.number');
                                const nextButton = Array.from(pageButtons).find(btn => btn.textContent.trim() === String(page));
                                if (nextButton) nextButton.click();
                            }, nextPage);
                            
                            await new Promise(resolve => setTimeout(resolve, 1000));
                            
                            await targetPage.waitForFunction(
                                (page) => {
                                    const activeButton = document.querySelector('.el-pager li.active');
                                    return activeButton && activeButton.textContent.trim() === String(page);
                                },
                                { timeout: 10000 },
                                nextPage
                            );
                        }

                        currentPage++;
                    }

                    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏≠‡∏ö
                    console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà', roundCount);
                    console.log(`   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalPages}`);
                    
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
                    showSummary(isTestMode);

                    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö 1 ‡∏£‡∏≠‡∏ö
                    if (isTestMode && roundCount >= 1) {
                        console.log('üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
                        isRunning = false;
                        showSummary(true);
                        break;
                    }

                    await new Promise(resolve => setTimeout(resolve, REFRESH_DELAY));
                } else {
                    console.log('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Single Hall ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á...');
                    await targetPage.goto(WORKDAY_URL, { waitUntil: 'networkidle0' });
                }
            } else {
                try {
                    const newPage = await browser.newPage();
                    await newPage.goto(WORKDAY_URL, { waitUntil: 'networkidle0' });
                } catch (error) {
                    console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ:', error.message);
                    isRunning = false;
                    break;
                }
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }
    } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:', error.message);
        isRunning = false;
    }
}

//---------Use Chome--------------------------------------------------------

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Chrome Debug Mode
async function checkChromeDebugMode() {
    try {
        const browser = await puppeteer.connect({
            browserURL: CHROME_DEBUG_URL,
            defaultViewport: null
        });
        
        await browser.disconnect();
        return {
            status: true,
            message: 'Chrome ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Debug Mode'
        };
    } catch (error) {
        return {
            status: false,
            message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡∏î‡πâ‡∏ß‡∏¢ Debug Mode'
        };
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Chrome Debug Mode
app.get('/check-chrome', async (req, res) => {
    const status = await checkChromeDebugMode();
    res.json(status);
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡∏î‡πâ‡∏ß‡∏¢ Debug Mode
async function openChromeWithDebug(urls = []) {
    try {
        const browser = await puppeteer.launch({
            headless: false,
            args: [
                '--remote-debugging-port=9222',
                urls[0] 
            ],
            defaultViewport: null
        });

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Chrome ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        await new Promise(resolve => setTimeout(resolve, 2000));

        // ‡πÄ‡∏õ‡∏¥‡∏î URL ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 2)
        for (let i = 1; i < urls.length; i++) {
            const page = await browser.newPage();
            await page.goto(urls[i], { waitUntil: 'networkidle0' });
        }

        return {
            status: true,
            message: `‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡πÅ‡∏•‡∏∞ URL ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${urls.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
            openedUrls: urls
        };
    } catch (error) {
        console.log("Failed to open Chrome:", error.message);
        return {
            status: false,
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡πÑ‡∏î‡πâ',
            error: error.message
        };
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡∏û‡∏£‡πâ‡∏≠‡∏° URL
app.post('/open-chrome', async (req, res) => {
    const { urls } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!urls || !Array.isArray(urls)) {
        return res.status(400).json({
            status: 'error',
            message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ urls ‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á URL'
        });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á URL
    const validUrls = urls.filter(url => {
        try {
            new URL(url);
            return true;
        } catch {
            return false;
        }
    });

    if (validUrls.length === 0) {
        return res.status(400).json({
            status: 'error',
            message: '‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        });
    }

    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const result = await openChromeWithDebug(validUrls);
    res.json(result);
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
async function stop() {
    if (!isRunning) {
        return { status: 'already_stopped', message: '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' };
    }
    
    isRunning = false;
    
    // Cleanup browser resources
    if (browser) {
        try {
            await browser.disconnect();
            browser = null;
        } catch (error) {
            console.error('Error disconnecting browser:', error.message);
        }
    }
    
    return { status: 'stopped', message: '‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î Chrome ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function closeAllChrome() {
    try {
        // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Chrome ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if (process.platform === 'win32') {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows
            require('child_process').execSync('taskkill /F /IM chrome.exe');
        } else {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö macOS ‡πÅ‡∏•‡∏∞ Linux
            require('child_process').execSync('pkill -f chrome');
        }
        
        return {
            status: true,
            message: '‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î Chrome ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß'
        };
    } catch (error) {
        return {
            status: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Chrome',
            error: error.message
        };
    }
}

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î Chrome ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/close-chrome', async (req, res) => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô stop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    const stopResult = await stop();

    // ‡∏õ‡∏¥‡∏î Chrome ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const closeResult = await closeAllChrome();

    if (closeResult.status) {
        // ‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡∏û‡∏£‡πâ‡∏≠‡∏° URL ‡πÉ‡∏´‡∏°‡πà
        const openResult = await openChromeWithDebug([
            URL_TBBOT,
            URL_TURBOROUTE
        ]);
        res.json(openResult);
    } else {
        res.json({ stopResult, closeResult });
    }
});

//---------UseChome--------------------------------------------------------

// ‡πÄ‡∏£‡∏¥‡πà‡∏° server
app.listen(SERVER_PORT, () => {
    console.log(`Server is running at ${HTTP}://${SERVER_HOST}:${SERVER_PORT}`);
});